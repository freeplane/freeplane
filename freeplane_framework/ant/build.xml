<project name="freeplane" default="dist" basedir="..">
	<property name="workspace" location=".." />
	<property file="${workspace}/freeplane/viewer-resources/version.properties" />
	<property file="ant/ant.properties" />
	<property name="freeplaneant.jar" value="${workspace}/freeplane_ant/dist/freeplaneant.jar" />
	<property name="root" value="." />
	<property name="build" value="${root}/build" />
	<property name="build4mac" value="${root}/build4mac" />
	<property name="build.plugins" value="${build}/plugins" />
	<property name="dist" value="${root}/dist" />
	<property name="macappfullpath" value="${build4mac}/Freeplane.app" />

	<property name="launcher_src" value="src" />
	<property name="launcher_manifest" value="${root}/META-INF/LAUNCHER_MANIFEST.MF" />
	<property name="launcher_build" value="${root}/launcher_build" />
	<property name="launcher_classpath" value="${framework.jar}" />
	
	<property name="debug" value="on" />
	<property name="java_source_version" value="1.5" />
	<property name="java_target_version" value="1.5" />
	<property name="build.compiler" value="modern" />

	<condition property="freeplane_version_status_suffix" value="" else="-${freeplane_version_status}">
		<equals arg1="${freeplane_version_status}" arg2=""/>
	</condition>

	<condition property="ver" value="${freeplane_version}${freeplane_version_status_suffix}_pre${minor}" else="${freeplane_version}${freeplane_version_status_suffix}">
		<isset property="minor" />
	</condition>

	<property name="license" value="license.txt" />
	<property name="readme_src" value="readme.txt" />
	<property name="build.resources" value="${build}/resources" />
	<property name="build.doc" value="${build}/doc" />
	<property name="build.scripts" value="${build}/scripts" />
	<property name="script" value="${root}/script" />
	
	<property name="skip_workspace" value="true" />

	<!-- Mac OS X -->
	<condition property="isMacOs">
		<os family="mac"/>
	</condition>

	<property name="mac-jarbundler" value = "${root}/mac-jarbundler"/>
	<property name="jarbundler.jar" value = "jarbundler-2.1.0.jar"/>
	<taskdef name="jarbundler" onerror="report"
			 classpath="${mac-jarbundler}/${jarbundler.jar}"
			 classname="net.sourceforge.jarbundler.JarBundler" />
	<taskdef name="create-plugin" onerror="report"
			 classpath="${freeplaneant.jar}"
			 classname="org.freeplane.ant.CreatePlugin"/>

	<target name="makePlugin">
		<ant antfile="ant/build.xml" target="${anttarget}" dir="${workspace}/${plugindir}" inheritall="false" />
		<mkdir dir="${build}/${targetdir}/${pluginname}" />
		<copy todir="${build}/${targetdir}/${pluginname}">
			<fileset dir="${workspace}/${plugindir}/dist/${pluginname}" />
		</copy>
	</target>


	<target name="build_core">
		<echo>Freeplane Version = ${ver}.</echo>

		<mkdir dir="${build}" />
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="osgi_dist"/>
			<param name="targetdir" value="core"/>
			<param name="plugindir" value="freeplane"/>
			<param name="pluginname" value="org.freeplane.core"/>
		</antcall>
	</target>

	<target name="build_help" unless="skip_help">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_help"/>
			<param name="pluginname" value="org.freeplane.plugin.help"/>
		</antcall>
	</target>

	<target name="build_latex" unless="skip_latex">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_latex"/>
			<param name="pluginname" value="org.freeplane.plugin.latex"/>
		</antcall>
	</target>

	<target name="build_svg" unless="skip_svg">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_svg"/>
			<param name="pluginname" value="org.freeplane.plugin.svg"/>
		</antcall>
	</target>

	<target name="build_script" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_script"/>
			<param name="pluginname" value="org.freeplane.plugin.script"/>
		</antcall>
	</target>

	<target name="build_script_api" unless="skip_script">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="api"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_script"/>
			<param name="pluginname" value="org.freeplane.plugin.script"/>
		</antcall>
	</target>

	<target name="build_formula" unless="skip_formula">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_formula"/>
			<param name="pluginname" value="org.freeplane.plugin.formula"/>
		</antcall>
	</target>

	<target name="build_bugreport" unless="skip_bugreport">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist"/>
			<param name="targetdir" value="plugins"/>
			<param name="plugindir" value="freeplane_plugin_bugreport"/>
			<param name="pluginname" value="org.freeplane.plugin.bugreport"/>
		</antcall>
	</target>

	<target name="build_openmaps" unless="skip_openmaps">
		<antcall target="makePlugin" inheritall="false">
			<param name="anttarget" value="dist" />
			<param name="targetdir" value="plugins" />
			<param name="plugindir" value="freeplane_plugin_openmaps" />
			<param name="pluginname" value="org.freeplane.plugin.openmaps"/>
		</antcall>
</target>

    <target name="build_workspace" unless="skip_workspace">
        <antcall target="makePlugin" inheritall="false">
            <param name="anttarget" value="dist"/>
            <param name="targetdir" value="plugins"/>
            <param name="plugindir" value="freeplane_plugin_workspace"/>
            <param name="pluginname" value="org.freeplane.plugin.workspace"/>
        </antcall>
    </target>
	
	<target name="build_launcher" depends="build_core">
		<mkdir dir="${launcher_build}" />
		<javac srcdir="${launcher_src}" destdir="${launcher_build}" classpath="${launcher_classpath}" 
			debug="${debug}" source="${java_source_version}" target="${java_target_version}" encoding="utf8"/>
		<jar jarfile="${freeplanelauncher.jar}" manifest="${launcher_manifest}">
			<fileset dir="${launcher_build}">
				<include name="**" />
			</fileset>
		</jar>
		
		<copy todir="${build}">
			<fileset dir="${script}" />
			<fileset file="${framework.jar}" />
			<fileset file="${freeplanelauncher.jar}" />
			<fileset file="windows-icons/freeplaneIcons.dll" />
			<fileset dir="launch4j" includes="*.exe" />
			<fileset dir="launch4j" includes="*.ini" />
		</copy>
		<chmod file="${build}/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="build" depends="build_core, build_latex, build_svg, build_script, build_formula, build_bugreport, build_openmaps, build_workspace, build_launcher, git_version_info">
		<mkdir dir="${build.resources}" />
		<copy todir="${build.resources}">
			<fileset dir="${workspace}/freeplane/dist/resources" />
			<fileset file="${dist}/gitinfo.properties"/>
		</copy>
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane/dist/doc" />
		</copy>
		<mkdir dir="${build.scripts}" />
		<copy todir="${build.scripts}">
			<fileset dir="${workspace}/freeplane_plugin_script/scripts" />
		</copy>

	</target>

	<target name="javadoc" depends="build_script_api">
		<mkdir dir="${build.doc}" />
		<copy todir="${build.doc}">
			<fileset dir="${workspace}/freeplane_plugin_script/dist/doc" />
		</copy>
	</target>

	<target name="mkdistdir">
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<target name="rungit" depends="mkdistdir">
		<delete file="${build}/gitinfo.txt" quiet="true"/>
		<delete file="${dist}/git.properties" quiet="true"/>
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt"
			failifexecutionfails="false" failonerror="false" logError="true"
			resultproperty="gitresult">
			<arg value='log'/>
			<arg value='--pretty=format:git-revision=%h_%an_%ai'/>
			<arg value='-n1'/>
		</exec>
		<condition property="gitok" value="">
			<equals arg1="${gitresult}" arg2="0"/>
		</condition>
	</target>

	<target name="git_version_info" depends="rungit" unless="giterror">
		<native2ascii src="${build}" dest="${dist}" includes="gitinfo.txt" ext=".properties"/>
		<replaceregexp file="${dist}/gitinfo.properties" flags="g" byline="false" match="[^\w=-]" replace="" />
		<property file="${dist}/gitinfo.properties"/>
		<exec dir="${build}" executable="git" output="${build}/gitinfo.txt" append="true"
            failifexecutionfails="false" failonerror="false" logError="true">
			<arg value='branch'/>
		</exec>
	</target>

	<target name="binzip" depends="build">
		<zip destfile="${dist}/freeplane_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build}" prefix="freeplane-${ver}">
				<exclude name="freeplane.sh"/>
			</zipfileset>
			<zipfileset file="${build}/freeplane.sh" filemode="775" prefix="freeplane-${ver}"/>
			<zipfileset dir="${root}" prefix="freeplane-${ver}">
				<include name="${license}" />
			</zipfileset>
		</zip>
	</target>

  <target name="srczip" depends="mkdistdir, git_version_info">
    <tempfile property="src.temp.dir" destDir="${java.io.tmpdir}" prefix="build-src"/>
    <mkdir dir="${src.temp.dir}"/>
    <copy todir="${src.temp.dir}" overwrite="true">
      <fileset dir="${workspace}">
        <include name="build.xml" />
        <include name="freeplane/**" />
        <include name="freeplane_plugin*/**" />
        <include name="freeplane_ant/**" />
        <include name="freeplane_mac/**" />
        <include name="freeplane_framework/**" />
        <include name="freeplane_devresources/**" />
        <include name="JOrtho_0.4_freeplane/**" />
        <include name="build.xml" />
        <exclude name=".*/**" />
        <exclude name="**/~*" />
        <exclude name="**/signjar.properties"/>
        <exclude name="**/backups/**" />
        <exclude name="bin/**" />
        <exclude name="build/**" />
        <exclude name="dist/**" />
        <exclude name="*/bin/**" />
        <exclude name="*/build/**" />
        <exclude name="*/launcher_build/**" />
        <exclude name="*/build-nodehighlighter/**" />
        <exclude name="*/build4mac/**" />
        <exclude name="*/dist/**" />
        <exclude name="**/.backup/**" />
        <exclude name="**/backups/**" />
        <exclude name="JOrtho_0.4_freeplane/src/dictionary_*.ortho" />
        <exclude name="freeplane_framework/windows-icons/Objects/**" />
        <exclude name="freeplane_framework/windows-icons/*.layout" />
        <exclude name="freeplane_framework/windows-icons/Makefile.win" />

        <!-- these are generated using mm2menu.xsl/mm2preferences.xsl! -->
        <exclude name="freeplane/resources/xml/browsemodemenu.xml"/>
        <exclude name="freeplane/resources/xml/filemodemenu.xml"/>
        <exclude name="freeplane/resources/xml/mindmapmodemenu.xml"/>
        <exclude name="freeplane/resources/xml/preferences.xml"/>
        <exclude name="freeplane/resources/xml/stylemodemenu.xml"/>
        <exclude name="freeplane/viewer-resources/xml/appletMenu.xml"/>
        <exclude name="freeplane_plugin_formula/src/org/freeplane/plugin/formula/preferences.xml"/>
        <exclude name="freeplane_plugin_script/src/org/freeplane/plugin/script/preferences.xml"/>
        <exclude name="freeplane_plugin_latex/src/org/freeplane/plugin/latex/preferences.xml"/>

      </fileset>
    </copy>
    <!-- fix crlf->lf so that the Linux package patches apply, no matter whether this is
         built on Windows or UNIX -->
    <echo>Normalizing line endings to LF in ${src.temp.dir}</echo>
    <fixcrlf srcDir="${src.temp.dir}" eol="lf" eof="asis" fixlast="false">
      <include name="**/*.java"/>
      <include name="**/*.xml"/>
      <include name="**/*.xsl"/>
      <include name="**/*.mm"/>
      <include name="**/*.MF"/>
      <include name="**/*.properties"/>
    </fixcrlf>
    <tar destfile="${dist}/freeplane_src-${ver}.tar.gz" compression="gzip" longfile="gnu">
      <tarfileset prefix="freeplane-${ver}" dir="${src.temp.dir}" mode="664">
        <include name="**"/>
      </tarfileset>
      <tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
        <include name="${license}" />
        <include name="${readme_src}" />
      </tarfileset>
    </tar>
    <!-- build the srcpure tar file with the normalized files 
         (this is used for linux packages)
    -->
    <tar destfile="${dist}/freeplane_srcpure-${ver}.tar.gz" compression="gzip" longfile="gnu">
      <tarfileset prefix="freeplane-${ver}" dir="${src.temp.dir}" mode="664">
        <!-- this file is built from latex.flex using jflex! -->
        <exclude name="freeplane_plugin_script/src-jsyntaxpane/jsyntaxpane/lexers/LaTeXLexer.java"/>
        <!-- these license files are in separate packages! -->
        <exclude name="freeplane_plugin_openmaps/lib/Gpl.txt"/>
        <exclude name="freeplane_plugin_latex/lib/COPYING"/>
        <exclude name="freeplane_plugin_latex/lib/LICENSE"/>
        <!-- windows stuff -->
        <exclude name="**/*.exe" />
        <exclude name="**/*.res" />
        <exclude name="**/*.jar" />
        <exclude name="**/*.dll" />
        <exclude name="**/*JavaApplicationStub*" />
      </tarfileset>
      <tarfileset prefix="freeplane-${ver}" dir="${root}" mode="664">
        <include name="${license}" />
        <include name="${readme_src}" />
      </tarfileset>
    </tar>
    <delete dir="${src.temp.dir}"/>
  </target>


	<target name="installer" depends="build, mkdistdir">
		<exec osfamily="windows" dir="${workspace}/freeplane_framework/windows-installer" executable="iscc.exe" failifexecutionfails="false" failonerror="true">
			<arg line="/Q Freeplane_without_Java.iss" />
		</exec>
	</target>

	<target name="portableinstaller" depends="build, mkdistdir">
		<property name="workingdir" value="${root}/temp/FreeplanePortable" />
		<delete quiet="true" includeemptydirs="false">
			<fileset dir="${workingdir}/.." />
		</delete>
		<mkdir dir="${workingdir}/App/Freeplane" />
		<copy todir="${workingdir}">
			<fileset dir="${root}/windows-portable" />
		</copy>
		<mkdir dir="${workingdir}/Other/Source" />
		<copy tofile="${workingdir}/Other/Source/EULA.txt">
			<fileset file="${workspace}/freeplane/resources/license.txt" />
		</copy>
		<copy tofile="${workingdir}/App/AppInfo/appicon.ico">
			<fileset file="launch4j/Freeplane_app.ico" />
		</copy>

		<copy todir="${workingdir}/App/Freeplane">
			<fileset dir="${build}">
				<exclude name="*.bat" />
				<exclude name="*.ini" />
				<exclude name="*.sh" />
			</fileset>
		</copy>
		<copy file="${root}/portableApps/portable.ini"  
			tofile="${workingdir}/App/Freeplane/freeplane.l4j.ini"/>

		<copy file="${root}/portableApps/portable.ini"  
			tofile="${workingdir}/App/Freeplane/freeplaneConsole.l4j.ini"/>

		<dirname property="workingdir.path" file="${workingdir}/file" />
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>
<!--
		<mkdir dir="${workingdir}/App/Freeplane/resources/images" />
		<copy file="${root}/portableApps/Splash.png"  
			tofile="${workingdir}/App/Freeplane/resources/images/Freeplane_splash.png"/>
		<exec osfamily="windows" executable="PortableApps.comInstaller.exe" failifexecutionfails="false" failonerror="true">
			<arg line="${workingdir.path}" />
		</exec>
		<move todir="${dist}">
			<mapper type="glob" from="*.paf.exe" to="*-Test.paf.exe"/>
			<fileset dir="${workingdir}/..">
				<include name="*.paf.exe" />
			</fileset>
		</move>
-->
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${workingdir}/.." />
		</delete>

	</target>

	<!-- Mac OS X -->
	<target name="macosxapp" depends="build">

		<property name="macpluginsdir" value="plugins" />
		<!-- !! TODO: Delete this unused property, and also delete its use in below in the jarbundler vmoptions field
            Disabled "command-line" parameters because the "$1" syntax is probably incorrect here:
    <property name="macparams" value="-Dorg.freeplane.param1=$1 -Dorg.freeplane.param2=$2 -Dorg.freeplane.param3=$3 -Dorg.freeplane.param4=$4" />
    -->
		<property name="macdefines" value="-Dorg.knopflerfish.framework.bundlestorage=memory -Dorg.freeplane.globalresourcedir=./resources -Dorg.knopflerfish.gosg.jars=reference:file:./core/" />

		<!-- uncomment to start remote debug session for the app
	<property name="debugparams" value="-Xdebug -Xrunjdwp:transport=dt_socket,address=localhost:8000"/>
	-->

		<condition property="debugparams" else="">
			<isset property="debugparams"/>
		</condition>

		<!-- Delete any existing Freeplane.app (it's a directory) -->
		<mkdir dir="${build4mac}"/>
		<delete dir="${build4mac}/Freeplane.app"/>
		<jarbundler dir="${build4mac}"
                name="Freeplane"
                mainclass="org.knopflerfish.framework.Main"
                version="${ver}"
                infostring="Freeplane ${ver}"
                shortname="Freeplane"
                bundleid="org.freeplane.core"
                jvmversion="1.2+"
                vmoptions="${debugparams} -Xmx512m ${macdefines}"
                arguments="-xargs ./props.xargs -xargs ./init.xargs"
                jar="${build}/framework.jar"
                icon="${mac-jarbundler}/freeplane.icns"
                stubfile="${mac-jarbundler}/FreeplaneJavaApplicationStub"
                signature="FP"
                >
			<!-- For OSGI we want the entire build/ tree except WIndows-related stuff
             Commented out to allow testing jar=framework.jar
      <jarfileset dir="${macosgidir}">
        <exclude name="**/*.bat" />
        <exclude name="**/*.exe" />
      </jarfileset>
      -->

			<!-- Commenting out the document icon until we get an appropriate image
                    iconfile="${mac-jarbundler}/Banner.icns"
      -->
			<documenttype name="Mindmap"
                    extensions="mm"
                    ostypes="MM"
                    iconfile="${mac-jarbundler}/freeplanedoc.icns"
                    role="Editor"/>
		</jarbundler>
		<chmod file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" perm="ugo+rx" />
		<!-- Patch the Info.plist file created by JarBundler, to work with Knopflerfish OSGI
           Courtesy of Volker who supplied the logic for this <replace> subtask
           Allows Freeplane to start when double-clicking on Freeplane.app in Finder
           Sets the WorkingDirectory to $JAVAROOT
              Found this idea in a post on Knopflerfish's SF site:
                http://sourceforge.net/tracker/index.php?func=detail&aid=1651148&group_id=82798&atid=567241
                The downloadable example code has problems but inspired the solution
    -->
		<echo message="Adding WorkingDirectory to Info.plist" />
		<property name="dist_macos_info" location="${macappfullpath}/Contents/Info.plist"/>
		<xslt style="${mac-jarbundler}/mac_info_plist.xslt"
			in ="${dist_macos_info}"
			out="${dist_macos_info}2"/>
		<move file="${dist_macos_info}2"
			  tofile="${dist_macos_info}"/>
		<!-- Done. -->

		<!-- Copy the entire build/ tree except WIndows-related stuff
          Also exclude the OSGI framework.jar which is copied by the jarbundler task
          Doing this separately to allow specifying jar=framework.jar in the jarbundler task
            jarbundler allows either jar= or jarfileset but not both
            Copying after the jarbundler task which creates the Freeplane.app directory
              JarBundler may erase the directory if it already exists
                This is documented in their change log
            !! TODO: Test restoring the jarfileset inside jarbundler
                       Comment out this copy task, and delete it if jarfileset works
    -->
		<property name="macjavafullpath" value="${macappfullpath}/Contents/Resources/Java"/>
		<copy todir="${macjavafullpath}">
			<fileset dir="${build}">
				<exclude name="**/*.bat" />
				<exclude name="**/*.exe" />
				<exclude name="**/framework.jar" />
			</fileset >
		</copy>

		<!-- Restore the eXecutable permission flags on the Unix script -->
		<echo message="Setting eXecutable permissions on ${macappfullpath}/Contents/Resources/Java/freeplane.sh" />
		<chmod file="${macappfullpath}/Contents/Resources/Java/freeplane.sh" perm="ugo+rx" />
	</target>

	<target name="zip4mac" depends="git_version_info, macosxapp">
		<zip destfile="${dist}/freeplane_macos_bin-${ver}.zip" compress="true">
			<zipfileset dir="${build4mac}" prefix="freeplane-${ver}">
				<exclude name="**/FreeplaneJavaApplicationStub" />
			</zipfileset>
			<zipfileset file="${macappfullpath}/Contents/MacOS/FreeplaneJavaApplicationStub" filemode="775"
            	prefix="freeplane-${ver}/Freeplane.app/Contents/MacOS"/>
		</zip>
	</target>
	<target name="dmg4mac"  depends="git_version_info, macosxapp" if="isMacOs" >
		<exec executable="hdiutil">
			<arg line="create -srcfolder ${macappfullpath} ${dist}/freeplane_app-${ver}.dmg"/>
		</exec>
	</target>
	
	<target name="renameDistFiles" if="minor">
		<move todir="${dist}" includeemptydirs="false">
		    <fileset dir="${dist}">
		      <include name="*${freeplane_version}.*"/>
		    </fileset>
			<mapper type="regexp" from="^(.*[-_])${freeplane_version}(\..*)$" to="\1${ver}\2"/>
		  </move>
	</target>
	
	
	<target name="dist" depends="copyDistFiles, renameDistFiles">
		<checksum>
		  <fileset dir="${dist}">
		    <include name="*.dmg"/>
		    <include name="*.zip"/>
		    <include name="*.gz"/>
		    <include name="*.exe"/>
		  </fileset>
		</checksum>
	</target>

	<target name="copyDistFiles" depends="git_version_info, binzip, srczip, installer, portableinstaller, zip4mac, dmg4mac, javadoc">
		<copy file="${workspace}/freeplane/doc/history_en.txt"
			todir="${dist}" />
		<copy file="${build}/gitinfo.txt"
			tofile="${dist}/gitinfo-${ver}.txt"
			failonerror="false"/>
		<copy file="${workspace}/freeplane_plugin_script/dist/script-api.zip"
			tofile="${dist}/script-api-${ver}.zip"
			failonerror="false"/>
	</target>

	<target name="cleandist" depends="clean,dist">
	</target>

	<target name="check-translation">
		<ant antfile="ant/build.xml" target="check-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation">
		<ant antfile="ant/build.xml" target="format-translation" dir="${workspace}/freeplane" />
	</target>
	<target name="format-translation-force">
		<ant antfile="ant/build.xml" target="format-translation-force" dir="${workspace}/freeplane" />
	</target>
	<target name="create-plugin">
		<create-plugin />
	</target>
	<target name="test">
		<ant antfile="build.xml" target="test" dir="${workspace}/freeplane_ant" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_plugin_script" inheritall="false" />
		<ant antfile="ant/build.xml" target="test" dir="${workspace}/freeplane_uitest" inheritall="false" />
	</target>

	<target name="clean">
		<delete quiet="true" includeemptydirs="true">
			<fileset dir="${build}" />
			<fileset dir="${launcher_build}" />
			<fileset dir="${build4mac}" />
			<fileset dir="${dist}" />
		</delete>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_help"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_svg"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_latex"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_script"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_formula"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_bugreport"/>
		<ant antfile="ant/build.xml" target="clean" inheritall="false"
			  dir="${workspace}/freeplane_plugin_openmaps"/>
        <ant antfile="ant/build.xml" target="clean" inheritall="false"
              dir="${workspace}/freeplane_plugin_workspace"/>
	</target>

</project>

