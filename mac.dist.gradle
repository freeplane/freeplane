import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

def appBundlerJar = 'freeplane_framework/mac-appbundler/appbundler-1.0.jar'
ant.taskdef(
    name: "appbundler",
    classname: 'com.oracle.appbundler.AppBundlerTask',
    classpath: appBundlerJar,
    onerror: "report"
)

def macAppPropertiesFile = file('macapp.properties')

Properties macAppProperties = new Properties()
if (macAppPropertiesFile.exists())
{
    macAppProperties.load(new FileInputStream(macAppPropertiesFile))
}

task macDist {}

def defineMacBuildTasks = {

   def jpackage = macAppProperties['macapp.jpackage.jdk'] + '/bin/jpackage'
   def zipExtracted = 'build/zip-extracted'
   String macosapp_input_dir

   def macosapp_extractzip = tasks.create('macosapp_extractzip'){
        mustRunAfter binZip
    doFirst {
      if(! binZip.archivePath.exists())
        ant.fail("File ${binZip.archivePath.path} not found")
      
      delete zipExtracted
      mkdir zipExtracted
      
      copy {
        from(zipTree(binZip.archivePath))
        into(zipExtracted)
      }
      macosapp_input_dir = zipExtracted + '/' + file(zipExtracted).list()[0] 
    }
   }

   def macosapp_input = tasks.create('macosapp_input'){
    dependsOn macosapp_extractzip

    doFirst {
        copy {
    		from(macosapp_input_dir) {
            include '*.*'
        }
        into 'build/macosapp/input'
      }
     
    }
   }

   def macosapp_deleteAppImage = tasks.create('macosapp_deleteAppImage', Delete) { 
     delete 'build/macosapp/app-image' 
   }

   def jpackage_macosxapp = tasks.create ('jpackage_macosxapp', Exec) {
   	commandLine jpackage,
   	 '--name' , 'Freeplane',
   	 '--type', 'app-image',
     '--icon', 'freeplane_framework/mac-appbundler/freeplane.icns',
     '--app-version', distVersion,
     '--java-options', '-Xmx512m',
     '--java-options', '-Dapple.laf.useScreenMenuBar=true',
     '--java-options', '-Xdock:name=Freeplane',
   	 '--input', 'build/macosapp/input',
   	 '--main-jar', 'freeplanelauncher.jar',
   	 '--runtime-image', macAppProperties['macapp.jdk.runtime.image'],
     '--copyright', "Freeplane ${distVersion}",
   	 '--dest', 'build/macosapp/app-image'

     dependsOn macosapp_input, macosapp_deleteAppImage
   }
   
   def macosapp_makeapp= tasks.create ('macosapp_makeapp') {
	   dependsOn jpackage_macosxapp
     doFirst {
        copy {
          from(macosapp_input_dir) {
                include '*/**'
          }
          into 'build/macosapp/app-image/Freeplane.app/Contents/app'
        }
        copy {
          from file ('freeplane_framework/mac-appbundler/freeplanedoc.icns')
          into 'build/macosapp/app-image/Freeplane.app/Contents/Resources'
        }

        def dist_macos_info = 'build/macosapp/app-image/Freeplane.app/Contents/Info.plist'
        ant.xslt(in: new File(dist_macos_info),
          style: new File('freeplane_framework/mac-appbundler/mac_info_plist.xslt'),
          out: new File(dist_macos_info + '2')
        )
        java.nio.file.Files.move(java.nio.file.Paths.get(dist_macos_info + '2'),
                   java.nio.file.Paths.get(dist_macos_info),
             java.nio.file.StandardCopyOption.REPLACE_EXISTING)

      }
    }
  
  def signMacApp= tasks.create ('signMacApp', Exec) {
        onlyIf { Os.isFamily(Os.FAMILY_MAC) && macAppProperties['macapp.codesign.identity'] != null}
 

      //  sudo codesign --force --deep --sign - /Applications/Freeplane.app  || exit $?

        commandLine 'codesign', '--deep', '--force',
        '--sign', '-',
        'build/macosapp/app-image/Freeplane.app'
        

        dependsOn macosapp_makeapp
    }

   def macosapp_copyvolumeicon= tasks.create ('macosapp_copyvolumeicon', Copy) {
     
    from file ('freeplane_framework/mac-appbundler/freeplane.icns')
    into file('build/macosapp/app-resource-dir')
    rename { String fileName ->
    'Freeplane-volume.icns'
    }
    
   }

  def dmg4mac = tasks.create ('dmg4mac', Exec) {
        def dmgPath = globalDist + '/freeplane' + '-' + distVersion + '.dmg';
        doFirst { 
            mkdir globalDist 
            file(dmgPath).delete()
        } 

   	commandLine jpackage,
   	 '--name' , 'Freeplane',
   	 '--type', 'dmg',
     '--app-version', distVersion,
   	 '--app-image', 'build/macosapp/app-image',
     '--mac-package-identifier', 'org.freeplane.core',
     '--mac-package-name', 'Freeplane',
     '--resource-dir', 'build/macosapp/app-resource-dir',
   	 '--dest', globalDist

        dependsOn signMacApp, macosapp_copyvolumeicon
    }
}

// if ( Os.isFamily(Os.FAMILY_MAC) 
//         	&& macAppProperties['macapp.jdk.runtime.image'] != null
//         	&& macAppProperties['macapp.jpackage.jdk'] != null
//         	//&& macAppProperties['macapp.codesign.identity'] != null
//         	) {
// }

    defineMacBuildTasks()
